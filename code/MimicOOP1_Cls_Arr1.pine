// License: https://opensource.org/license/bsd-3-clause
// Â© 2024 grantj-re3

//@version=5
IND_TITLE = "MimicOOP1_Cls_Arr1"
indicator(IND_TITLE)

// PURPOSE
// Attempt to write a Pine Script program to mimic OOP encapsulation.
// 1/ Mimic an OOP class which has class level attributes/methods.
// 2/ What if we want the constructor to append every object that it
//    creates to an array within EmployeeCls (as we might in other
//    OOP languages)? This is difficult with our existing arrangement.
//    However, UDTs (User Defined Types) can reference their own
//    type, so we can put the array within EmployeeInst instead.
//    We keep a single copy of the array in the calling scope (main
//    in this program) and pass a reference to it in the constructor
//    argument list.
//
// Notes:
// - In conventional OOP languages, a single class contains both class
//   level attributes/methods *and* instance level attributes/methods.
//   In this program, we implement these two levels separately.
// - EmployeeCls = Employee class level attributes/methods. We make
//   only one object of EmployeeCls in the whole program.
// - EmployeeInst = Employee instance level attributes/methods. We make
//   many objects of EmployeeInst in the whole program.
// - We use init() to behave as a constructor (since new() is already
//   used in pine script). We invoke constructors just like a class method.
//
// Try to implement the following Python tutorial:
//   Corey Schafer: Python OOP Tutorials - Working with Classes
//   Tutorials 1, 2 and 3
//   https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc

//////////////////////////////////////////////////////////////////////////////
// Employee class vars. (Make a single object of this type.)
//////////////////////////////////////////////////////////////////////////////
type EmployeeCls
    int numOfEmps = 0
    float raiseAmt = 1.04

//////////////////////////////////////////////////////////////////////////////
// Employee instance vars & methods
//////////////////////////////////////////////////////////////////////////////
type EmployeeInst
    EmployeeCls _cls        // Allow access to class vars/methods from each instance/object
    string first
    string last
    string email
    float  pay
    EmployeeInst[] emp_list // Self referencing type

method fullname(EmployeeInst self) =>
    str.format("{0} {1}", self.first, self.last)    // Return the string

method apply_raise(EmployeeInst self) =>
    self.pay := self.pay * self._cls.raiseAmt

method set_email(EmployeeInst self) =>
    self.email := str.format("{0}.{1}@email.com", self.first, self.last)

method repr(EmployeeInst self) =>      // Similar to python __repr__()
    str.format("EmployeeInst(''{0}'', ''{1}'', ''{2}'', {3,number,#})",
      self.first, self.last, self.email, self.pay) 

//////////////////////////////////////////////////////////////////////////////
// Employee instance constructor(s)
//////////////////////////////////////////////////////////////////////////////
// Constructor
method init(EmployeeCls cls, string first, string last, float pay, EmployeeInst[] emp_list=na) =>
    self = EmployeeInst.new()
    self._cls  := cls       // All EmployeeInst objects will point to the *one* instance of the class object.
    self.first := first
    self.last  := last
    self.pay   := pay
    self.set_email()
    self._cls.numOfEmps += 1
    if not na(emp_list)
        self.emp_list := emp_list
        self.emp_list.push(self)
    self                    // Return the new object

// Overloaded constructor. Called from_string() in Corey's tutorial.
method init(EmployeeCls cls, string empStr, EmployeeInst[] emp_list=na) =>
    parts = str.split(empStr, '-')
    cls.init(parts.get(0), parts.get(1), str.tonumber(parts.get(2)), emp_list)  // Return the new object

//////////////////////////////////////////////////////////////////////////////
// Employee class methods
//////////////////////////////////////////////////////////////////////////////
// Similar to a Python @classmethod (because we use cls.something)
method setRaiseAmt(EmployeeCls cls, float amount) =>
    cls.raiseAmt := amount

// The from_string() class method is now the second init() constructor above.

//////////////////////////////////////////////////////////////////////////////
// Main
//////////////////////////////////////////////////////////////////////////////
if barstate.islast
    log.info("{0}\nAttempt to write a Pine Script program to mimic OOP encapsulation", IND_TITLE)
    employeeCls = EmployeeCls.new()         // Make a *single* copy of class vars
    emp_list = array.new<EmployeeInst>(0)   // Make a *single* copy

    // Use the single class level object (employeeCls) to construct multiple instances
    emp1 = employeeCls.init('Corey', 'Schafer', 50000, emp_list)
    emp2 = employeeCls.init('Test', 'Employee', 60000, emp_list)

    log.info(emp1.email)
    log.info(emp1.fullname())

    log.info(emp2.email)
    log.info(emp2.fullname())

    // Use the single class level object (employeeCls) to invoke class level methods
    employeeCls.setRaiseAmt(1.05)
    log.info("{0}", emp1.pay)
    emp1.apply_raise()
    log.info("{0}", emp1.pay)

    log.info("{0}", employeeCls.raiseAmt)
    // The _cls field is supposed to be private, but we are using it here
    // to show that each raiseAmt field is derived from the *same* object.
    log.info("{0}", emp1._cls.raiseAmt)
    log.info("{0}", emp2._cls.raiseAmt)

    empStr1 = "John-Doe-70000"
    empStr2 = "Steve-Smith-30000"
    empStr3 = "Jane-Doe-90000"

    // Use the single class level object (employeeCls) to construct multiple instances
    // Invoke the overloaded constructor
    newEmp1 = employeeCls.init(empStr1, emp_list)
    newEmp2 = employeeCls.init(empStr2, emp_list)
    newEmp3 = employeeCls.init(empStr3, emp_list)

    log.info("{0}", employeeCls.numOfEmps)  // Class level attribute

    for emp in emp_list
        log.info(emp.repr())

